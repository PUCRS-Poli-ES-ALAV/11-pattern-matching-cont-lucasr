//AUTOR Lucas Tashan Porto Ramos

public class PatternMatching{
    public final static int d = 23; 
    private static int counter = 0;

    public static void main(String[] args) {
        String txt = "ABCDCBDCBDACBDABDCBADF"; 
		String pat = "ADF";

        System.out.println("TESTES");
        System.out.println("txt = " + txt + "\npat = " + pat);
        System.out.println("Força bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;

        txt = "ABCDCBDCBDACBDABDCBADF"; 
        pat = "JJJ";
        System.out.println("\ntxt = " + txt + "\npat = " + pat);
        System.out.println("Força bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;

        txt = geraString(50, 20); 
		pat = "TWABCDEFGHIJK";
        System.out.println("\ntxt = " + txt + "\npat = " + pat);
        System.out.println("Força bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;

        txt = geraString(50_000, 2); 
		pat = geraString(20_000, 2);
        pat = pat + "Z";
        System.out.println("\nForça bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;

        txt = geraString(500_000, 2); 
		pat = geraString(20_000, 2);
        pat = pat + "Z";
        System.out.println("\nForça bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;

        txt = geraString(500_000, 2); 
		pat = geraString(20_000, 2);
		txt = txt + "Z";
        pat = pat + "Z";
        System.out.println("\nForça bruta -> "+patternMatching(txt, pat)+"      iterações: "+counter);
        counter = 0;
        search(pat, txt, 101);
        counter = 0;
        KMPSearch(pat, txt);
        counter = 0;
        
    }

    public static int patternMatching(String s1, String s2){
        
        if(s1.length() < s2.length()) return -1;

        char[] arr1 = s1.toCharArray();
        char[] arr2 = s2.toCharArray();
        int j = 0;
        int count = 0;

        for(int i = 0;i < arr1.length;i++){
            counter++;
            if(arr1[i] != arr2[j]) 
                j = 0;
            else 
                j++; 
            if(j == arr2.length) 
                break;
            else 
                count++; 
            if(i == (arr1.length-1)) return -1;
        }

        return (count - j + 1);
    }

    private static String geraString(int size, int rep) {
		StringBuilder res = new StringBuilder();;
		String charStr = "ABCDEFGHIJKLMOPQRSTWXYZ";
		int posCharStr = 0;
		
		if (size > 0 && rep > 0 && rep < charStr.length()) {
			for (int i = 0; i < size; i++) {
				res.append(charStr.charAt(posCharStr));
				posCharStr++;
				if (posCharStr == rep)
					posCharStr = 0;
			}
		}
		return res.toString();
    }

    static void search(String pat, String txt, int q) 
    { 
        int M = pat.length(); 
        int N = txt.length(); 
        int i, j; 
        int p = 0; // hash value for pattern 
        int t = 0; // hash value for txt 
        int h = 1; 
  
        for (i = 0; i < M - 1; i++) 
        counter++;
            h = (h * d) % q; 
  
        for (i = 0; i < M; i++) { 
            p = (d * p + pat.charAt(i)) % q; 
            t = (d * t + txt.charAt(i)) % q; 
            counter++;
        } 
  
        for (i = 0; i <= N - M; i++) { 
            counter++;
            if (p == t) { 
                for (j = 0; j < M; j++) { 
                    if (txt.charAt(i + j) != pat.charAt(j)) 
                        break; 
                } 
                if (j == M) 
                    System.out.println("Rabin-Karp found at index " + i+"      iterações: "+counter); 
            } 
            if (i < N - M) { 
                t = (d * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q; 
                if (t < 0) 
                    t = (t + q); 
            } 
        } 
    } 


	private static void KMPSearch(String pat, String txt) 
	{ 
		int M = pat.length(); 
		int N = txt.length(); 

		// cria lps[] que vai guardar o maior 
		// valor prefixo sufixo para o padrão 
		int lps[] = new int[M]; 
		int j = 0; // index for pat[] 

		// Calcula lps[] 
		computeLPSArray(pat, M, lps); 

		int i = 0; // index for txt[] 
		while (i < N) { 
            counter++;
			if (pat.charAt(j) == txt.charAt(i)) { 
				j++; 
				i++; 
			} 
			if (j == M) { 
				System.out.println("KMP found "
								+ "at index " + (i - j)+"      iterações: "+counter); 
				j = lps[j - 1]; 
			} 

			// mismatch após j matches 
			else if (i < N && pat.charAt(j) != txt.charAt(i)) { 
				// Não faz match dos caracteres lps[0..lps[j-1]], 
				// não é necesssário, eles combinarão 
				if (j != 0) 
					j = lps[j - 1]; 
				else
					i = i + 1; 
			} 
		} 
    } 
    
    private static void computeLPSArray(String pat, int M, int lps[]) 
	{ 
		// tamanho do maior prefixo sufixo anterior 
		int len = 0; 
		int i = 1; 
		lps[0] = 0; // lps[0] is always 0 

		// loop calcula lps[i] for i = 1 to M-1 
		while (i < M) { 
            counter++;
			if (pat.charAt(i) == pat.charAt(len)) { 
				len++; 
				lps[i] = len; 
				i++; 
			} 
			else // (pat[i] != pat[len]) 
			{ 
				if (len != 0) { 
					len = lps[len - 1]; 
				} 
				else // if (len == 0) 
				{ 
					lps[i] = len; 
					i++; 
				} 
			} 
		} 
    } 
}
